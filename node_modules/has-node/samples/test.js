function testStab(deviceHK) {

    setTimeout(updateStatusOnHKNoNull, 10000, -1, deviceHK);
    setTimeout(updateStatusOnHKNoNull, 10000, null, deviceHK);
    setTimeout(updateStatusOnHKNoNull, 10000, NaN, deviceHK);
    setTimeout(updateStatusOnHKNoNull, 10000, undefined, deviceHK);
    setTimeout(updateStatusOnHKNoNull, 10000, -99999999, deviceHK);
    setTimeout(updateStatusOnHKNoNull, 12000, true, deviceHK);
    setTimeout(updateStatusOnHKNoNull, 10000, 0, deviceHK);
    setTimeout(updateStatusOnHKNoNull, 10000, null * 10, deviceHK);
    setTimeout(updateStatusOnHKNoNull, 10000, NaN * 10, deviceHK);
    setTimeout(updateStatusOnHKNoNull, 10000, undefined * 10, deviceHK);

}

function updateStatusOnHKNoNull(variable, deviceHK) {
    // testStab(deviceHK);
    try {
        deviceHK.setValue(variable);
    } catch (error) {
        console.log(error);
    }
}

const HAS = require('../');

let config = new HAS.Config('NodeJS Motion Sensor', '49:E6:B6:63:BC:2C', HAS.categories.sensor, __dirname + '/motion.json', 8095, '200-20-200');

let server = new HAS.Server(config);

let motion = new HAS.Accessory(1);

let motionIdentify = HAS.predefined.Identify(1, undefined, (value, callback) => {
        console.log('Motion Sensor Identify', value);
        callback(HAS.statusCodes.OK);
    }),
    motionManufacturer = HAS.predefined.Manufacturer(2, 'Hamyar'),
    motionModel = HAS.predefined.Model(3, 'Model2017'),
    motionName = HAS.predefined.Name(4, 'Motion Sensor'),
    motionSerialNumber = HAS.predefined.SerialNumber(5, 'ABCDEFGHIJKLMNO'),
    motionFirmwareVersion = HAS.predefined.FirmwareRevision(6, '1.0.0');
motion.addServices(HAS.predefined.AccessoryInformation(1, [motionIdentify, motionManufacturer, motionModel, motionName, motionSerialNumber, motionFirmwareVersion]));


let motionDetected = HAS.predefined.MotionDetected(2, false);
//testStab(motionDetected)
motion.addServices(HAS.predefined.MotionSensor(2, [motionDetected]));

let CurrentRelativeHumidity = HAS.predefined.CurrentRelativeHumidity(3);
//testStab(CurrentRelativeHumidity)
motion.addServices(HAS.predefined.HumiditySensor(3, [CurrentRelativeHumidity]));

let CurrentAmbientLightLevel = HAS.predefined.CurrentAmbientLightLevel(4);
//testStab(CurrentAmbientLightLevel)
motion.addServices(HAS.predefined.LightSensor(4, [CurrentAmbientLightLevel]));

let CurrentTemperature = HAS.predefined.CurrentTemperature(5, undefined);
CurrentTemperature.minValue = - CurrentTemperature.maxValue;
CurrentTemperature.setValue(0);
motion.addServices(HAS.predefined.TemperatureSensor(5, [CurrentTemperature]));

let BatteryLevel = HAS.predefined.BatteryLevel(6);
//testStab(BatteryLevel);
let ChargingState = HAS.predefined.ChargingState(7, 2);
//testStab(ChargingState);
let StatusLowBattery = HAS.predefined.StatusLowBattery(8);
//testStab(StatusLowBattery);

motion.addServices(HAS.predefined.BatteryService(6, [BatteryLevel, ChargingState, StatusLowBattery]));

let On = HAS.predefined.On(9);
//testStab(On)
motion.addServices(HAS.predefined.Lightbulb(7, [On]));

let ContactSensorState = HAS.predefined.ContactSensorState(10);
//testStab(ContactSensorState)
motion.addServices(HAS.predefined.ContactSensor(8, [ContactSensorState]));

server.addAccessory(motion);

//server.onIdentify will be used only when server is not paired, If server is paired identify.onWrite will be used
server.onIdentify = motionIdentify.onWrite;

//Starts the server
server.startServer();

setInterval(() => {
    console.log('updating');
    server.config.increaseCCN();
}, 15000);